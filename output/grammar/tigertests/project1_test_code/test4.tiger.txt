(tigerprogram main let (declarationsegment (typedeclarationlist (typedeclaration type First_Int = (type (typeid int)) ;) (typedeclarationlist (typedeclaration type Second_Int = (type First_Int) ;) typedeclarationlist)) (vardeclarationlist (vardeclaration var (idlist X itail) : (type First_Int) (optionalinit := (consta 0)) ;) (vardeclarationlist (vardeclaration var (idlist Y itail) : (type Second_Int) optionalinit ;) (vardeclarationlist (vardeclaration var (idlist A itail) : (type (typeid int)) (optionalinit := (consta 0)) ;) (vardeclarationlist (vardeclaration var (idlist B itail) : (type (typeid float)) (optionalinit := (consta 0.1)) ;) vardeclarationlist)))) functdeclarationlist) in begin (statseq (stat (lvalue Y lvaluetail) := (more ltail (expr (and (le (me (lesser (greater (noteq (equal (minus (plus (div (mult (exp (yeet (lvalue Y lvaluetail))))) + (div (mult (exp (yeet (lvalue X lvaluetail))))))))))))))) ;)) (stail (statseq (stat (lvalue A lvaluetail) := (more ltail (expr (and (le (me (lesser (greater (noteq (equal (minus (plus (div (mult (exp (yeet (lvalue A lvaluetail))))) + (div (mult (exp (yeet (lvalue B lvaluetail))))))))))))))) ;)) stail))) end)
