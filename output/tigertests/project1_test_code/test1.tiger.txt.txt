(tigerprogram main let (declarationsegment (typedeclarationlist (typedeclaration type ArrayInt = (type array [ 100 ] of (typeid int)) ;) typedeclarationlist) (vardeclarationlist (vardeclaration var (idlist X (itail , (idlist Y itail))) : (type ArrayInt) (optionalinit := (consta 10)) ;) (vardeclarationlist (vardeclaration var (idlist i (itail , (idlist sum itail))) : (type (typeid int)) (optionalinit := (consta 0)) ;) vardeclarationlist)) functdeclarationlist) in begin (statseq (stat for i := (expr (and (le (me (lesser (greater (noteq (equal (minus (plus (div (mult (exp (yeet (consta 0))))))))))))))) to (expr (and (le (me (lesser (greater (noteq (equal (minus (plus (div (mult (exp (yeet (consta 99))))))))))))))) do (statseq (stat (lvalue sum lvaluetail) := (more ltail (expr (and (le (me (lesser (greater (noteq (equal (minus (plus (div (mult (exp (yeet (lvalue sum lvaluetail))))) + (div (mult (exp (yeet (lvalue X (lvaluetail [ (expr (and (le (me (lesser (greater (noteq (equal (minus (plus (div (mult (exp (yeet (lvalue i lvaluetail))))))))))))))) ])))) * (exp (yeet (lvalue Y (lvaluetail [ (expr (and (le (me (lesser (greater (noteq (equal (minus (plus (div (mult (exp (yeet (lvalue i lvaluetail))))))))))))))) ])))))))))))))))) ;)) stail) enddo ;) (stail (statseq (stat printi ( (exprlist (expr (and (le (me (lesser (greater (noteq (equal (minus (plus (div (mult (exp (yeet (lvalue sum lvaluetail))))))))))))))) exprlisttail) )) (stail ;)))) end)
(tigerprogram main let (declarationsegment (typedeclarationlist (typedeclaration type ArrayInt = (type array [ 100 ] of (typeid int)) ;) typedeclarationlist) (vardeclarationlist (vardeclaration var (idlist X (itail , (idlist Y itail))) : (type ArrayInt) (optionalinit := (consta 10)) ;) (vardeclarationlist (vardeclaration var (idlist i (itail , (idlist sum itail))) : (type (typeid int)) (optionalinit := (consta 0)) ;) vardeclarationlist)) functdeclarationlist) in begin (statseq (stat for i := (expr (and (le (me (lesser (greater (noteq (equal (minus (plus (div (mult (exp (yeet (consta 0))))))))))))))) to (expr (and (le (me (lesser (greater (noteq (equal (minus (plus (div (mult (exp (yeet (consta 99))))))))))))))) do (statseq (stat (lvalue sum lvaluetail) := (more ltail (expr (and (le (me (lesser (greater (noteq (equal (minus (plus (div (mult (exp (yeet (lvalue sum lvaluetail))))) + (div (mult (exp (yeet (lvalue X (lvaluetail [ (expr (and (le (me (lesser (greater (noteq (equal (minus (plus (div (mult (exp (yeet (lvalue i lvaluetail))))))))))))))) ])))) * (exp (yeet (lvalue Y (lvaluetail [ (expr (and (le (me (lesser (greater (noteq (equal (minus (plus (div (mult (exp (yeet (lvalue i lvaluetail))))))))))))))) ])))))))))))))))) ;)) stail) enddo ;) (stail (statseq (stat printi ( (exprlist (expr (and (le (me (lesser (greater (noteq (equal (minus (plus (div (mult (exp (yeet (lvalue sum lvaluetail))))))))))))))) exprlisttail) )) (stail ;)))) end)
