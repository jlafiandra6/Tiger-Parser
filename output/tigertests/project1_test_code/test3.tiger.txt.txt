(tigerprogram main let (declarationsegment typedeclarationlist (vardeclarationlist (vardeclaration var (idlist X (itail , (idlist Y itail))) : (type (typeid float)) (optionalinit := (consta 0.0)) ;) vardeclarationlist) (functdeclarationlist (functdeclaration function print ( (paramlist (param X : (type (typeid int))) paramlisttail) ) rettype begin (statseq (stat printi ( (exprlist (expr (and (le (me (lesser (greater (noteq (equal (minus (plus (div (mult (exp (yeet (lvalue X lvaluetail))))))))))))))) exprlisttail) )) (stail ;)) end ;) functdeclarationlist)) in begin (statseq (stat print ( (exprlist (expr (and (le (me (lesser (greater (noteq (equal (minus (plus (div (mult (exp (yeet (consta 1)))))) - (plus (div (mult (exp (yeet (consta 2))))) + (div (mult (exp (yeet (consta 3))))))))))))))) exprlisttail) )) (stail ; print ( 1 ** 2 ** 3 ) ; X := 1.0 ;)) end)
(tigerprogram main let (declarationsegment typedeclarationlist (vardeclarationlist (vardeclaration var (idlist X (itail , (idlist Y itail))) : (type (typeid float)) (optionalinit := (consta 0.0)) ;) vardeclarationlist) (functdeclarationlist (functdeclaration function print ( (paramlist (param X : (type (typeid int))) paramlisttail) ) rettype begin (statseq (stat printi ( (exprlist (expr (and (le (me (lesser (greater (noteq (equal (minus (plus (div (mult (exp (yeet (lvalue X lvaluetail))))))))))))))) exprlisttail) )) (stail ;)) end ;) functdeclarationlist)) in begin (statseq (stat print ( (exprlist (expr (and (le (me (lesser (greater (noteq (equal (minus (plus (div (mult (exp (yeet (consta 1)))))) - (plus (div (mult (exp (yeet (consta 2))))) + (div (mult (exp (yeet (consta 3))))))))))))))) exprlisttail) )) (stail ; print ( 1 ** 2 ** 3 ) ; X := 1.0 ;)) end)
