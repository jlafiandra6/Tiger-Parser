(tigerprogram main let (declarationsegment typedeclarationlist (vardeclarationlist (vardeclaration var (idlist a (itail , (idlist b itail))) : (type (typeid int)) (optionalinit := (consta 0)) ;) vardeclarationlist) functdeclarationlist) in begin (statseq (stat if (expr (and (le (me (lesser (greater (noteq (equal (minus (plus (div (mult (exp (yeet ( (expr (and (le (me (lesser (greater (noteq (equal (minus (plus (div (mult (exp (yeet (lvalue a lvaluetail))))))) = (minus (plus (div (mult (exp (yeet (lvalue b lvaluetail))))))))))))))) ))))))))))))))) then (statseq (stat (lvalue a lvaluetail) := (more ltail (expr (and (le (me (lesser (greater (noteq (equal (minus (plus (div (mult (exp (yeet (lvalue b lvaluetail))))) + (div (mult (exp (yeet (consta 2))))))))))))))) ;)) stail) (statail else (statseq (stat (lvalue a lvaluetail) := (more ltail (expr (and (le (me (lesser (greater (noteq (equal (minus (plus (div (mult (exp (yeet (consta 2))))))))))))))) ;)) stail) endif ;)) (stail (statseq (stat printi ( (exprlist (expr (and (le (me (lesser (greater (noteq (equal (minus (plus (div (mult (exp (yeet (lvalue a lvaluetail))))))))))))))) exprlisttail) )) (stail ;)))) end)
(tigerprogram main let (declarationsegment typedeclarationlist (vardeclarationlist (vardeclaration var (idlist a (itail , (idlist b itail))) : (type (typeid int)) (optionalinit := (consta 0)) ;) vardeclarationlist) functdeclarationlist) in begin (statseq (stat if (expr (and (le (me (lesser (greater (noteq (equal (minus (plus (div (mult (exp (yeet ( (expr (and (le (me (lesser (greater (noteq (equal (minus (plus (div (mult (exp (yeet (lvalue a lvaluetail))))))) = (minus (plus (div (mult (exp (yeet (lvalue b lvaluetail))))))))))))))) ))))))))))))))) then (statseq (stat (lvalue a lvaluetail) := (more ltail (expr (and (le (me (lesser (greater (noteq (equal (minus (plus (div (mult (exp (yeet (lvalue b lvaluetail))))) + (div (mult (exp (yeet (consta 2))))))))))))))) ;)) stail) (statail else (statseq (stat (lvalue a lvaluetail) := (more ltail (expr (and (le (me (lesser (greater (noteq (equal (minus (plus (div (mult (exp (yeet (consta 2))))))))))))))) ;)) stail) endif ;)) (stail (statseq (stat printi ( (exprlist (expr (and (le (me (lesser (greater (noteq (equal (minus (plus (div (mult (exp (yeet (lvalue a lvaluetail))))))))))))))) exprlisttail) )) (stail ;)))) end)
